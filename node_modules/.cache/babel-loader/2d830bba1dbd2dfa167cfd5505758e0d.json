{"ast":null,"code":"var _jsxFileName = \"/Users/admin/LeMovies/src/components/movie-grid/MovieGrid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport { useParams } from 'react-router-dom';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport { OutlineButton } from '../button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (keyword === undefined) {\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            console.log(\"movie\" + response);\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n            console.log(\"tv\" + response);\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      console.log(response);\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n\n    getList();\n  }, [props.category]);\n\n  const loadMore = async () => {\n    let response = null;\n    const params = {\n      page: page + 1\n    };\n\n    if (keyword === undefined) {\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          console.log(\"movie\" + response);\n          break;\n\n        default:\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n          console.log(\"tv\" + response);\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    } // console.log(response)\n\n\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        item: item,\n        category: props.category\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid__loadmore\",\n      children: /*#__PURE__*/_jsxDEV(OutlineButton, {\n        className: \"small\",\n        onPress: loadMore,\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"no\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MovieGrid, \"oOvENlLw5AxBdHpqwEicfrCE0uk=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieGrid;\nexport default MovieGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieGrid\");","map":{"version":3,"sources":["/Users/admin/LeMovies/src/components/movie-grid/MovieGrid.jsx"],"names":["React","useEffect","useState","MovieCard","useParams","tmdbApi","category","movieType","tvType","OutlineButton","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","params","undefined","movie","getMoviesList","upcoming","console","log","getTvList","popular","query","search","results","total_pages","loadMore","map","item","i"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport { useParams } from 'react-router-dom';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport { OutlineButton } from '../button/Button';\nconst MovieGrid = props => {\n    const [items, setItems] = useState([]);\n\n    const [page, setPage] = useState(1);\n    const [totalPage, setTotalPage] = useState(0);\n    const {keyword} = useParams();\n    useEffect(() => {\n        const getList = async () => {\n            let response = null;\n            const params = {};\n            if(keyword === undefined) {\n                switch(props.category) {\n                    case category.movie:\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\n                         console.log(\"movie\"+ response);\n                        break;\n                    default: \n                        response = await tmdbApi.getTvList(tvType.popular, {params});\n                        console.log(\"tv\"+ response);\n                }\n            } else {\n                    const params = {\n                    query : keyword\n                }\n                response = await tmdbApi.search(props.category, {params});\n            }\n            console.log(response)\n            setItems(response.results);\n            setTotalPage(response.total_pages);\n            }\n            getList();\n        }\n\n    ,[props.category]);\n\n    const loadMore = async () =>{\n        let response = null;\n        const params = {\n            page: page + 1\n        };\n        if(keyword === undefined) {\n            switch(props.category) {\n                case category.movie:\n                    response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\n                     console.log(\"movie\"+ response);\n                    break;\n                default: \n                    response = await tmdbApi.getTvList(tvType.popular, {params});\n                    console.log(\"tv\"+ response);\n            }\n        } else {\n                const params = {\n                    page: page +1,\n                    query : keyword\n            }\n            response = await tmdbApi.search(props.category, {params});\n        }\n        // console.log(response)\n        setItems([...items, ...response.results]);\n        setPage(page +1);\n    }\n\n    return (\n       <>\n         <div className=\"movie-grid\">\n            {\n                items.map((item, i) => <MovieCard item={item} category={props.category} key={i}/>)\n            }\n        </div>\n        {\n            page < totalPage? (\n                <div className=\"movie-grid__loadmore\">\n                    <OutlineButton className=\"small\" onPress={loadMore}>Load more</OutlineButton>\n                </div>\n            ) : <div>no</div>\n        }\n       </>\n    )\n}\n\nexport default MovieGrid\n"]},"metadata":{},"sourceType":"module"}