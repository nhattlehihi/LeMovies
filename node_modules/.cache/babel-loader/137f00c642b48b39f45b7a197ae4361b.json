{"ast":null,"code":"var _jsxFileName = \"/Users/admin/LeMovies/src/components/movie-grid/MovieGrid.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport { OutlineButton } from '../button/Button';\nimport Input from '../input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MovieGrid = props => {\n  _s();\n\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(1);\n  const [totalPage, setTotalPage] = useState(0);\n  const {\n    keyword\n  } = useParams();\n  useEffect(() => {\n    const getList = async () => {\n      let response = null;\n      const params = {};\n\n      if (keyword === undefined) {\n        switch (props.category) {\n          case category.movie:\n            response = await tmdbApi.getMoviesList(movieType.upcoming, {\n              params\n            });\n            console.log(\"movie\" + response);\n            break;\n\n          default:\n            response = await tmdbApi.getTvList(tvType.popular, {\n              params\n            });\n            console.log(\"tv\" + response);\n        }\n      } else {\n        const params = {\n          query: keyword\n        };\n        response = await tmdbApi.search(props.category, {\n          params\n        });\n      }\n\n      console.log(response);\n      setItems(response.results);\n      setTotalPage(response.total_pages);\n    };\n\n    getList();\n  }, [props.category]);\n\n  const loadMore = async () => {\n    let response = null;\n    const params = {\n      page: page + 1\n    };\n\n    if (keyword === undefined) {\n      switch (props.category) {\n        case category.movie:\n          response = await tmdbApi.getMoviesList(movieType.upcoming, {\n            params\n          });\n          console.log(\"movie\" + response);\n          break;\n\n        default:\n          response = await tmdbApi.getTvList(tvType.popular, {\n            params\n          });\n          console.log(\"tv\" + response);\n      }\n    } else {\n      const params = {\n        page: page + 1,\n        query: keyword\n      };\n      response = await tmdbApi.search(props.category, {\n        params\n      });\n    } // console.log(response)\n\n\n    setItems([...items, ...response.results]);\n    setPage(page + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section mb-3\",\n      children: /*#__PURE__*/_jsxDEV(MovieSearch, {\n        category: category,\n        keyword: keyword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid\",\n      children: items.map((item, i) => /*#__PURE__*/_jsxDEV(MovieCard, {\n        item: item,\n        category: props.category\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }, this), page < totalPage ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movie-grid__loadmore\",\n      children: /*#__PURE__*/_jsxDEV(OutlineButton, {\n        className: \"small\",\n        onPress: loadMore,\n        children: \"Load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"no\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MovieGrid, \"oOvENlLw5AxBdHpqwEicfrCE0uk=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieGrid;\n\nconst MovieSearch = props => {\n  _s2();\n\n  const history = useNavigate();\n  const [keyword, setKeyword] = useState(props.keyword ? props.keyword : '');\n  const gotoSearch = useCallback(() => {\n    if (keyword.trim().length > 0) {\n      history.push(`${category[props.category]}/search/${keyword}`);\n    }\n  }, [keyword, props.category, history]);\n  useEffect(() => {\n    const enterEvent = e => {\n      e.preventDefault();\n\n      if (e.keycode === 13) {\n        gotoSearch();\n      }\n    };\n\n    return () => {\n      document.removeEventListener('keyup', enterEvent);\n    };\n  }, [keyword, gotoSearch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-search\",\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Enter keyword\",\n      value: keyword,\n      onChange: e => setKeyword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(MovieSearch, \"XfdLW6IlukNtm4++fZ7wn2tKqLw=\", false, function () {\n  return [useNavigate];\n});\n\n_c2 = MovieSearch;\nexport default MovieGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MovieGrid\");\n$RefreshReg$(_c2, \"MovieSearch\");","map":{"version":3,"sources":["/Users/admin/LeMovies/src/components/movie-grid/MovieGrid.jsx"],"names":["React","useEffect","useState","useCallback","MovieCard","useNavigate","useParams","tmdbApi","category","movieType","tvType","OutlineButton","Input","MovieGrid","props","items","setItems","page","setPage","totalPage","setTotalPage","keyword","getList","response","params","undefined","movie","getMoviesList","upcoming","console","log","getTvList","popular","query","search","results","total_pages","loadMore","map","item","i","MovieSearch","history","setKeyword","gotoSearch","trim","length","push","enterEvent","e","preventDefault","keycode","document","removeEventListener","target","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useCallback} from 'react'\nimport './movie-grid.scss';\nimport MovieCard from '../movie-card/MovieCard';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport tmdbApi, { category, movieType, tvType } from '../../api/tmdbApi';\nimport { OutlineButton } from '../button/Button';\nimport Input from '../input/Input';\nconst MovieGrid = props => {\n    const [items, setItems] = useState([]);\n\n    const [page, setPage] = useState(1);\n    const [totalPage, setTotalPage] = useState(0);\n    const {keyword} = useParams();\n    useEffect(() => {\n        const getList = async () => {\n            let response = null;\n            const params = {};\n            if(keyword === undefined) {\n                switch(props.category) {\n                    case category.movie:\n                        response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\n                         console.log(\"movie\"+ response);\n                        break;\n                    default: \n                        response = await tmdbApi.getTvList(tvType.popular, {params});\n                        console.log(\"tv\"+ response);\n                }\n            } else {\n                    const params = {\n                    query : keyword\n                }\n                response = await tmdbApi.search(props.category, {params});\n            }\n            console.log(response)\n            setItems(response.results);\n            setTotalPage(response.total_pages);\n            }\n            getList();\n        }\n\n    ,[props.category]);\n\n    const loadMore = async () =>{\n        let response = null;\n        const params = {\n            page: page + 1\n        };\n        if(keyword === undefined) {\n            switch(props.category) {\n                case category.movie:\n                    response = await tmdbApi.getMoviesList(movieType.upcoming, {params})\n                     console.log(\"movie\"+ response);\n                    break;\n                default: \n                    response = await tmdbApi.getTvList(tvType.popular, {params});\n                    console.log(\"tv\"+ response);\n            }\n        } else {\n                const params = {\n                    page: page +1,\n                    query : keyword\n            }\n            response = await tmdbApi.search(props.category, {params});\n        }\n        // console.log(response)\n        setItems([...items, ...response.results]);\n        setPage(page +1);\n    }\n\n    return (\n       <>\n       <div className=\"section mb-3\">\n            <MovieSearch category={category} keyword={keyword} />\n       </div>\n       \n         <div className=\"movie-grid\">\n            {\n                items.map((item, i) => <MovieCard item={item} category={props.category} key={i}/>)\n            }\n        </div>\n        {\n            page < totalPage? (\n                <div className=\"movie-grid__loadmore\">\n                    <OutlineButton className=\"small\" onPress={loadMore}>Load more</OutlineButton>\n                </div>\n            ) : <div>no</div>\n        }\n       </>\n    )\n}\n\nconst MovieSearch = props => {\n    const history = useNavigate();\n    const [keyword, setKeyword] = useState(props.keyword? props.keyword : '');\n\n    const gotoSearch = useCallback(\n        () => {\n            if(keyword.trim().length > 0)\n            {\n                history.push(`${category[props.category]}/search/${keyword}`);\n            }\n        },\n        [keyword, props.category,history],\n    )\n        useEffect(() => {\n            const enterEvent = (e) => {\n                e.preventDefault();\n                if(e.keycode === 13) {\n                    gotoSearch();\n                }\n            }\n            return () => {\n                document.removeEventListener('keyup', enterEvent);\n            }\n        }, [keyword, gotoSearch])\n\n    return (\n        <div className=\"movie-search\">\n            <Input\n                type=\"text\"\n                placeholder =\"Enter keyword\"\n                value={keyword}\n                onChange={(e) => setKeyword(e.target.value)}\n            />\n        </div>\n    )\n}\n\nexport default MovieGrid\n"]},"metadata":{},"sourceType":"module"}